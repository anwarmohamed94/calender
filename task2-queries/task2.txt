
1. Find unbooked properties

SELECT p.id, p.title, p.owner_id
FROM properties p
LEFT JOIN bookings b ON p.id = b.property_id
WHERE b.id IS NULL;


2. Detect overlapping bookings

SELECT 
    b1.id AS booking1_id, 
    b2.id AS booking2_id,
    b1.property_id,
    b1.start_date AS booking1_start,
    b1.end_date AS booking1_end,
    b2.start_date AS booking2_start,
    b2.end_date AS booking2_end
FROM 
    bookings b1
JOIN 
    bookings b2 ON b1.property_id = b2.property_id
               AND b1.id < b2.id  -- Avoid duplicate pairs and self-comparison
WHERE 
    b1.start_date < b2.end_date 
    AND b1.end_date > b2.start_date;

3. Top 5 users by distinct properties booked

SELECT 
    u.id, 
    u.name, 
    COUNT(DISTINCT b.property_id) AS distinct_properties_booked
FROM 
    users u
JOIN 
    bookings b ON u.id = b.user_id
GROUP BY 
    u.id, u.name
ORDER BY 
    distinct_properties_booked DESC
LIMIT 5;


4. Recommend schema/indexing improvements for large datasets

- create index on single fields that we can use to query like (keycloak_id) in users table, and like propert_id on bookings table
- we can create composite index on fields that called frequently together  like (start_date and end_date) for bookings table
also like user_id, property_id, start_date,end_date